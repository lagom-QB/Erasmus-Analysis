[meta title:"Erasmus Programme" description:"Information about participants of the Erasmus Programme, data from 2014-2020" /]

[Header
  fullWidth:true
  title:"Erasmus Programme"
  subtitle:"Storytelling on the Erasmus Programme"
  author:"Brenda"
  authorLink:"https://lagom-qb.github.io"
  date:`(new Date()).toDateString()`
  background:"#22222"
  color:"#ffffff"
  /]

[var name:"state" value:0 /]

[Scroller currentStep:state]

  [Step]

    ## Introduction
    Did you ever wonder about where people in the erasmus programme come from? Or how about where they are going to? Or what is the duration of the programme?  

    If you didn't, I did.   
    Fortunately, I was able to get my hands on data about the programme and went ahead to dig into it.   

    The data I'm using is from [Erasmus link](https://data.europa.eu).  

    I was focusing on answering these questions:  

1. Where are people travelling to?
2. Where are they travelling from?
3. What is the overall gender of people traveling? 
4. What cities do they travel to? Or from?
5. At what level of education are they?
6. What is the nationality of the people travelling?
7. What is the gender of the traveller?   
  [/Step]

  [Step]  

    ## Data Cleaning

    I had to filter the data to get the columns I was interested in which was limited to the
    **Participant data, Sending organization** and **Recieving organization**

    ### Data Columns
1. Field of education  
2. Participant nationality  
3. Education level  
4. Participant gender  
5. Sending country code  
6. Sending city  
7. Recieving country code  
8. Recieving city    
  [/Step]

  [Step]
    ## Where are people traveling to?
    [em]Sample data containing *Receiving Country Code* , *Receiving City* , *Count Of Participants going to that destination* and *Categorical Country Code* ... [/em]
    
    [data name:"erasmusData" source:"destination.csv" /] 
    [Table data:`erasmusData.slice(0,20).sort()` defaultPageSize:5 theme:"material" /]
    
    [Aside]
      [CollisionGraph value:`erasmusData.slice(0,40).sort()` /]
    [/Aside]

  [/Step]


  [Step]
    * lists
    * of
    * items,

        ```
        * lists
        * of
        * items,
        ```

    1. and numbered
    2. lists
    3. of items,


        ```
        1. and numbered
        2. lists
        3. of items,
        ```

      in addition to [hyperlinks](https://idyll-lang.org) and images:

      ![quill](static/images/quill.svg)

      ```
      ![quill](static/images/quill.svg)
      ```
  [/Step]

  [Step]
    ## Components

    Components can be embedded using a bracket syntax:

    ```
    [Range /]
    ```

    and can contain nested content:

    ```
    [Equation]e = mc^{2}[/Equation]
    ```

    Components accept properties:

    ```
    [Range value:x min:0 max:1 /]
    ```

    that can be bound to variables to achieve interactivity (more in next section).


    A variety of components are included by default. See [all the available components](https://idyll-lang.org/docs/components/). You can also use any html tag, for example: `[div] A div! [/div]`.

    To create your own, add it to the `components/` folder. There are examples of how to use Idyll with React and D3 based components already included.

  [/Step]

  [Step]
    ## Interactivity

    Here is how you can instantiate a variable and bind it to a component:

    [var name:"exampleVar" value:5 /]

    [Range min:0 max:10 value:exampleVar /]
    [Display value:exampleVar /]

    ```
    [var name:"exampleVar" value:5 /]

    [Range min:0 max:10 value:exampleVar /]
    [Display value:exampleVar /]
    ```
  [/Step]

[/Scroller]

[Scroller]

  [Step]

    ##Scroller

    The `Scroller` component is used to create scroll-based presentations. It can be used to create scrollytelling articles similar to this.
    It takes a property `currentStep` which is updated when the user scrolls to a different step.

    A persistent graphic may also provided using the `Graphic` component in order to create visualizations.

  [/Step]

  [Step]

    ## Learn More

    To learn more see the documentation at [https://idyll-lang.org/docs/](https://idyll-lang.org/docs/),
    join our [chatroom](https://gitter.im/idyll-lang/Lobby), or see the project on [GitHub](https://github.com/idyll-lang/idyll).

  [/Step]

[/Scroller]

[br/]
# Technical Details

## Installation

- Make sure you have `idyll` installed (`npm i -g idyll`).
- Clone this repo and run `npm install`.

## Developing a post locally

Run `idyll`.

## Building a post for production

Run `idyll build`. The output will appear in the top-level `build` folder. To change the output location, change the `output` option in `package.json`.

## Deploying

Make sure your post has been built, then deploy the docs folder via any static hosting service.

## Dependencies

You can install custom dependencies by running `npm install <package-name> --save`. Note that any collaborators will also need download the package locally by running `npm install` after pulling the changes.
